from mdk.types.specifier import TypeSpecifier

__all__ = ['Expression', 'IntExpression', 'ConvertibleExpression', 'TupleExpression']

class Expression:
    exprn: str
    type: TypeSpecifier
    def __init__(self, exprn: str, type: TypeSpecifier) -> None: ...
    def make_expression(self, exprn: str): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    def __floordiv__(self, other): ...
    def __mod__(self, other): ...
    def __pow__(self, other): ...
    def __rshift__(self, other) -> None: ...
    def __lshift__(self, other) -> None: ...
    def __and__(self, other): ...
    def __or__(self, other): ...
    def __xor__(self, other): ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...
    def __rmul__(self, other): ...
    def __rtruediv__(self, other): ...
    def __rfloordiv__(self, other): ...
    def __rmod__(self, other): ...
    def __rpow__(self, other): ...
    def __rlshift__(self, other): ...
    def __rrshift__(self, other): ...
    def __rand__(self, other): ...
    def __ror__(self, other): ...
    def __rxor__(self, other): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __round__(self): ...
    def __trunc__(self) -> int: ...
    def __floor__(self) -> int: ...
    def __ceil__(self) -> int: ...
    def __bool__(self) -> bool: ...

IntExpression: Expression
type ConvertibleExpression = Expression | str | int | float | bool
type TupleExpression = tuple[ConvertibleExpression, ...]
